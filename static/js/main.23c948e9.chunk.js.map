{"version":3,"sources":["Components/PeopleList.js","Components/AddPeople.js","App.js","serviceWorker.js","index.js"],"names":["PeopleList","props","peopleList","people","map","person","name","age","profession","id","react_default","a","createElement","key","onClick","onDelete","AddPeople","onSubmit","e","preventDefault","inputs","document","querySelectorAll","querySelector","value","length","onChange","forEach","input","focus","htmlFor","type","required","autoFocus","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleDelete","setState","push","filter","Components_PeopleList","Components_AddPeople","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23c948e9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction PeopleList(props) {\r\n  const peopleList = props.people.map(person => {\r\n    const {name, age, profession, id} = person;\r\n    return (\r\n      <ul key={id}>\r\n        <li>Name: {name}</li>\r\n        <li>Age: {age}</li>\r\n        <li>Profession: {profession}</li>\r\n        <button onClick={() => props.onDelete(id)}>Delete</button>\r\n      </ul>\r\n    );\r\n  })\r\n  return (\r\n    <div>\r\n      <p>People List</p>\r\n      {peopleList}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PeopleList;\r\n","import React from \"react\";\r\n\r\nfunction AddPeople(props) {\r\n\r\n  function handleSubmit(e){\r\n    e.preventDefault();\r\n    const inputs = document.querySelectorAll(\"input[type='text']\");\r\n    const name = document.querySelector(\"#name\").value;\r\n    const age = document.querySelector(\"#age\").value;\r\n    const profession = document.querySelector(\"#profession\").value;\r\n    const people = props.people;\r\n    let person = {name, age, profession, id: people[people.length - 1].id + 1};\r\n    props.onChange(person);\r\n    inputs.forEach(input => input.value = \"\");\r\n    document.querySelector(\"#name\").focus();\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"name\">Name: </label>\r\n        <input type=\"text\" id=\"name\" required autoFocus /><br />\r\n        <label htmlFor=\"age\">Age: </label>\r\n        <input type=\"text\" id=\"age\" required /><br />\r\n        <label htmlFor=\"profession\">Profession: </label>\r\n        <input type=\"text\" id=\"profession\" required /><br />\r\n        <button>Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPeople;\r\n","import React, { Component } from 'react';\r\nimport PeopleList from \"./Components/PeopleList\";\r\nimport AddPeople from \"./Components/AddPeople\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      people: [\r\n        {name: \"Ali\", age: 21, profession: \"builder\", id: 1},\r\n        {name: \"John\", age: 30, profession: \"mechanic\", id: 2},\r\n        {name: \"Hans\", age: 34, profession: \"journalist\", id: 3}\r\n      ]\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n  }\r\n  handleChange(person){\r\n    this.setState(state => {\r\n      state.people.push(person);\r\n      return state;\r\n    });\r\n  }\r\n  handleDelete(id){\r\n    const people = this.state.people.filter(person => person.id !== id);\r\n    this.setState({people,});\r\n  }\r\n  render(){\r\n    return (\r\n      <div>\r\n        <PeopleList onDelete={this.handleDelete} people={this.state.people} />\r\n        <AddPeople people={this.state.people} onChange={this.handleChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}